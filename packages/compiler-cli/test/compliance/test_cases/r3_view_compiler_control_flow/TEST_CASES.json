{
  "$schema": "../test_case_schema.json",
  "cases": [
    {
      "description": "should generate a basic switch block",
      "angularCompilerOptions": {
        "_enabledBlockTypes": ["switch"]
      },
      "inputFiles": [
        "basic_switch.ts"
      ],
      "expectations": [
        {
          "files": [
            {
              "expected": "basic_switch_template.js",
              "generated": "basic_switch.js"
            }
          ],
          "failureMessage": "Incorrect template"
        }
      ],
      "skipForTemplatePipeline": true
    },
    {
      "description": "should generate a switch block without a default block",
      "angularCompilerOptions": {
        "_enabledBlockTypes": ["switch"]
      },
      "inputFiles": [
        "switch_without_default.ts"
      ],
      "expectations": [
        {
          "files": [
            {
              "expected": "switch_without_default_template.js",
              "generated": "switch_without_default.js"
            }
          ],
          "failureMessage": "Incorrect template"
        }
      ],
      "skipForTemplatePipeline": true
    },
    {
      "description": "should generate nested switch blocks",
      "angularCompilerOptions": {
        "_enabledBlockTypes": ["switch"]
      },
      "inputFiles": [
        "nested_switch.ts"
      ],
      "expectations": [
        {
          "files": [
            {
              "expected": "nested_switch_template.js",
              "generated": "nested_switch.js"
            }
          ],
          "failureMessage": "Incorrect template"
        }
      ],
      "skipForTemplatePipeline": true
    },
    {
      "description": "should generate switch block with a pipe in its expression",
      "angularCompilerOptions": {
        "_enabledBlockTypes": ["switch"]
      },
      "inputFiles": [
        "switch_with_pipe.ts"
      ],
      "expectations": [
        {
          "files": [
            {
              "expected": "switch_with_pipe_template.js",
              "generated": "switch_with_pipe.js"
            }
          ],
          "failureMessage": "Incorrect template"
        }
      ],
      "skipForTemplatePipeline": true
    },
    {
      "description": "should generate a basic if block",
      "angularCompilerOptions": {
        "_enabledBlockTypes": ["if"]
      },
      "inputFiles": [
        "basic_if.ts"
      ],
      "expectations": [
        {
          "files": [
            {
              "expected": "basic_if_template.js",
              "generated": "basic_if.js"
            }
          ],
          "failureMessage": "Incorrect template"
        }
      ],
      "skipForTemplatePipeline": true
    },
    {
      "description": "should generate a basic if/else block",
      "angularCompilerOptions": {
        "_enabledBlockTypes": ["if"]
      },
      "inputFiles": [
        "basic_if_else.ts"
      ],
      "expectations": [
        {
          "files": [
            {
              "expected": "basic_if_else_template.js",
              "generated": "basic_if_else.js"
            }
          ],
          "failureMessage": "Incorrect template"
        }
      ],
      "skipForTemplatePipeline": true
    },
    {
      "description": "should generate a basic if/else if block",
      "angularCompilerOptions": {
        "_enabledBlockTypes": ["if"]
      },
      "inputFiles": [
        "basic_if_else_if.ts"
      ],
      "expectations": [
        {
          "files": [
            {
              "expected": "basic_if_else_if_template.js",
              "generated": "basic_if_else_if.js"
            }
          ],
          "failureMessage": "Incorrect template"
        }
      ],
      "skipForTemplatePipeline": true
    },
    {
      "description": "should generate a nested if block",
      "angularCompilerOptions": {
        "_enabledBlockTypes": ["if"]
      },
      "inputFiles": [
        "nested_if.ts"
      ],
      "expectations": [
        {
          "files": [
            {
              "expected": "nested_if_template.js",
              "generated": "nested_if.js"
            }
          ],
          "failureMessage": "Incorrect template"
        }
      ],
      "skipForTemplatePipeline": true
    },
    {
      "description": "should generate an if block using pipes in its conditions",
      "angularCompilerOptions": {
        "_enabledBlockTypes": ["if"]
      },
      "inputFiles": [
        "if_with_pipe.ts"
      ],
      "expectations": [
        {
          "files": [
            {
              "expected": "if_with_pipe_template.js",
              "generated": "if_with_pipe.js"
            }
          ],
          "failureMessage": "Incorrect template"
        }
      ],
      "skipForTemplatePipeline": true
    },
    {
      "description": "should generate an if block with an aliased expression",
      "angularCompilerOptions": {
        "_enabledBlockTypes": ["if"]
      },
      "inputFiles": [
        "if_with_alias.ts"
      ],
      "expectations": [
        {
          "files": [
            {
              "expected": "if_with_alias_template.js",
              "generated": "if_with_alias.js"
            }
          ],
          "failureMessage": "Incorrect template"
        }
      ],
      "skipForTemplatePipeline": true
    },
    {
      "description": "should expose the alias to nested conditional blocks",
      "angularCompilerOptions": {
        "_enabledBlockTypes": ["if"]
      },
      "inputFiles": [
        "if_nested_alias.ts"
      ],
      "expectations": [
        {
          "files": [
            {
              "expected": "if_nested_alias_template.js",
              "generated": "if_nested_alias.js"
            }
          ],
          "failureMessage": "Incorrect template"
        }
      ],
      "skipForTemplatePipeline": true
    },
    {
      "description": "should expose the alias to nested event listeners",
      "angularCompilerOptions": {
        "_enabledBlockTypes": ["if"]
      },
      "inputFiles": [
        "if_nested_alias_listeners.ts"
      ],
      "expectations": [
        {
          "files": [
            {
              "expected": "if_nested_alias_listeners_template.js",
              "generated": "if_nested_alias_listeners.js"
            }
          ],
          "failureMessage": "Incorrect template"
        }
      ],
      "skipForTemplatePipeline": true
    }
  ]
}
